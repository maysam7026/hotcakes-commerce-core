//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Moslem.Modules.GDSModuleMVC.ir.retirement {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="CspfServiceSoap", Namespace="http://cspf.ir/service/")]
    public partial class CspfService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CspfServiceInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback CspfServiceMoshtarakOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public CspfService() {
            this.Url = "http://www1.retirement.ir/cspfwebservice/cspfservice.asmx";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CspfServiceInfoCompletedEventHandler CspfServiceInfoCompleted;
        
        /// <remarks/>
        public event CspfServiceMoshtarakCompletedEventHandler CspfServiceMoshtarakCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cspf.ir/service/CspfServiceInfo", RequestNamespace="http://cspf.ir/service/", ResponseNamespace="http://cspf.ir/service/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CspfServiceInfo(long DaftarKol, long Codemelli, long shhesab, string Username, string Password, string EnduserIP) {
            object[] results = this.Invoke("CspfServiceInfo", new object[] {
                        DaftarKol,
                        Codemelli,
                        shhesab,
                        Username,
                        Password,
                        EnduserIP});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CspfServiceInfoAsync(long DaftarKol, long Codemelli, long shhesab, string Username, string Password, string EnduserIP) {
            this.CspfServiceInfoAsync(DaftarKol, Codemelli, shhesab, Username, Password, EnduserIP, null);
        }
        
        /// <remarks/>
        public void CspfServiceInfoAsync(long DaftarKol, long Codemelli, long shhesab, string Username, string Password, string EnduserIP, object userState) {
            if ((this.CspfServiceInfoOperationCompleted == null)) {
                this.CspfServiceInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCspfServiceInfoOperationCompleted);
            }
            this.InvokeAsync("CspfServiceInfo", new object[] {
                        DaftarKol,
                        Codemelli,
                        shhesab,
                        Username,
                        Password,
                        EnduserIP}, this.CspfServiceInfoOperationCompleted, userState);
        }
        
        private void OnCspfServiceInfoOperationCompleted(object arg) {
            if ((this.CspfServiceInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CspfServiceInfoCompleted(this, new CspfServiceInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cspf.ir/service/CspfServiceMoshtarak", RequestNamespace="http://cspf.ir/service/", ResponseNamespace="http://cspf.ir/service/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CspfServiceMoshtarak(long DaftarKol, long Codemelli, string Username, string Password, string EnduserIP) {
            object[] results = this.Invoke("CspfServiceMoshtarak", new object[] {
                        DaftarKol,
                        Codemelli,
                        Username,
                        Password,
                        EnduserIP});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CspfServiceMoshtarakAsync(long DaftarKol, long Codemelli, string Username, string Password, string EnduserIP) {
            this.CspfServiceMoshtarakAsync(DaftarKol, Codemelli, Username, Password, EnduserIP, null);
        }
        
        /// <remarks/>
        public void CspfServiceMoshtarakAsync(long DaftarKol, long Codemelli, string Username, string Password, string EnduserIP, object userState) {
            if ((this.CspfServiceMoshtarakOperationCompleted == null)) {
                this.CspfServiceMoshtarakOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCspfServiceMoshtarakOperationCompleted);
            }
            this.InvokeAsync("CspfServiceMoshtarak", new object[] {
                        DaftarKol,
                        Codemelli,
                        Username,
                        Password,
                        EnduserIP}, this.CspfServiceMoshtarakOperationCompleted, userState);
        }
        
        private void OnCspfServiceMoshtarakOperationCompleted(object arg) {
            if ((this.CspfServiceMoshtarakCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CspfServiceMoshtarakCompleted(this, new CspfServiceMoshtarakCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void CspfServiceInfoCompletedEventHandler(object sender, CspfServiceInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CspfServiceInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CspfServiceInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void CspfServiceMoshtarakCompletedEventHandler(object sender, CspfServiceMoshtarakCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CspfServiceMoshtarakCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CspfServiceMoshtarakCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591